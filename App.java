/*
 * Lucky Gumafelix
 * CSC 492 - Senior Design Project
 * Imageflux: Parking Detection System using Image Processing
 * Dr. Mohsen Beheshti
 */
package imageflux;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import com.googlecode.javacv.*;
import com.googlecode.javacv.cpp.opencv_core.IplImage;
import com.googlecode.javacv.cpp.opencv_highgui.CvCapture;

import static com.googlecode.javacv.cpp.opencv_core.*;
import static com.googlecode.javacv.cpp.opencv_highgui.*;
import java.io.File;
import java.io.IOException;
import org.opencv.core.Core;
import org.opencv.core.MatOfByte;

import imageflux.ImageProcess;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.util.Date;
import javax.swing.SwingConstants;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPReply;

/**
 *
 * @author LUCKY
 */
public class App extends javax.swing.JFrame {

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        liveCameraLabel = new javax.swing.JLabel();
        liveCameraPanel = new javax.swing.JPanel();
        spaceDetectorPanel = new javax.swing.JPanel();
        spaceDetectorLabel = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        availableLabel = new javax.swing.JLabel();
        testImageButton = new javax.swing.JButton();
        availableSpaceLabel = new javax.swing.JLabel();
        totalSpaceLabel = new javax.swing.JLabel();
        totalLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        occupiedLabel = new javax.swing.JLabel();
        timestampLabel = new javax.swing.JLabel();
        timestampText = new javax.swing.JLabel();
        showPointsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Imageflux: Parking Detection System");

        liveCameraLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        liveCameraLabel.setText("Live Camera");

        liveCameraPanel.setBackground(new java.awt.Color(255, 255, 204));
        liveCameraPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout liveCameraPanelLayout = new javax.swing.GroupLayout(liveCameraPanel);
        liveCameraPanel.setLayout(liveCameraPanelLayout);
        liveCameraPanelLayout.setHorizontalGroup(
            liveCameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 638, Short.MAX_VALUE)
        );
        liveCameraPanelLayout.setVerticalGroup(
            liveCameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );

        spaceDetectorPanel.setBackground(new java.awt.Color(204, 255, 255));
        spaceDetectorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout spaceDetectorPanelLayout = new javax.swing.GroupLayout(spaceDetectorPanel);
        spaceDetectorPanel.setLayout(spaceDetectorPanelLayout);
        spaceDetectorPanelLayout.setHorizontalGroup(
            spaceDetectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 638, Short.MAX_VALUE)
        );
        spaceDetectorPanelLayout.setVerticalGroup(
            spaceDetectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );

        spaceDetectorLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        spaceDetectorLabel.setText("Parking Space Detector");

        startButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        startButton.setText("START");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        stopButton.setText("STOP");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        availableLabel.setBackground(new java.awt.Color(0, 204, 51));
        availableLabel.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        availableLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(0, 0, 0)));
        availableLabel.setOpaque(true);

        testImageButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        testImageButton.setText("Test Image");
        testImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testImageButtonActionPerformed(evt);
            }
        });

        availableSpaceLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        availableSpaceLabel.setText("Available Spaces:");

        totalSpaceLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totalSpaceLabel.setText("Total Spaces:");

        totalLabel.setBackground(new java.awt.Color(255, 255, 0));
        totalLabel.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        totalLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(0, 0, 0)));
        totalLabel.setOpaque(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Occupied Space:");

        occupiedLabel.setBackground(new java.awt.Color(255, 0, 0));
        occupiedLabel.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        occupiedLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        occupiedLabel.setOpaque(true);

        timestampLabel.setBackground(new java.awt.Color(51, 51, 255));
        timestampLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        timestampLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 255), 3));

        timestampText.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        timestampText.setText("Time Captured:");

        showPointsButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        showPointsButton.setText("Show Points");
        showPointsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPointsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(liveCameraPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(liveCameraLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spaceDetectorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(testImageButton)
                                .addGap(35, 35, 35)
                                .addComponent(showPointsButton))
                            .addComponent(spaceDetectorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(availableSpaceLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(occupiedLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalSpaceLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(availableLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timestampText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timestampLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(liveCameraLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spaceDetectorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(liveCameraPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spaceDetectorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(timestampText, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timestampLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(availableSpaceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(availableLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(occupiedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(totalSpaceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                        .addComponent(testImageButton, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))
                    .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                    .addComponent(showPointsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // global variable defintions
    static int availableSpace = 0;
    static int occupiedSpace = 0;
    static int totalSpace = 0;
    private DaemonThread1 myThread1 = null;
    //Mat frame = new Mat();
    IplImage frame;
    CvCapture g_capture;
    MatOfByte mem = new MatOfByte();
    IplImage webcamImage;
    ImageProcess algorithm;

    class DaemonThread1 implements Runnable {

        // DaemonThread1: Thread to open and grab webcam images
        protected volatile boolean runnable = false;
        IplImage imageToDisplay;
        BufferedImage image;
        Graphics g;
        Image scaledImage;
        String time;
        OpenCVFrameGrabber grabber = new OpenCVFrameGrabber(1);

        @Override
        public void run() {
            synchronized (this) {
                while (runnable) {
                    try {
                        // 0 = built in webcam; 1 = external webcam
                        g_capture = cvCreateCameraCapture(1);
                        grabber.start();
                        myThread2.runnable = true;
                        myThread3.runnable = true;
                        boolean once = true;
                        for (;;) {
                            frame = cvQueryFrame(g_capture);
                            imageToDisplay = grabber.grab();
                            //error checking if the video does not exist in the location
                            if (frame == null) {
                                System.out.println("ERROR: Video not found DaemonThread1.");
                                break;
                            }
                            // after thread #1 starts, start threads #2 and #3 only once
                            if (once == true) {
                                t2.start();
                                t3.start();
                                once = false;
                            }
                            //System.out.println("line 374");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println("error: DaemonThread1 START BUTTON");
                    }
                } // while
            }
        } //end of DaemonThread1 run() method

        // DaemonThread2: Thread to display the grabbed image (from DaemonThread1) to the jPanel
        DaemonThread2 myThread2 = new DaemonThread2();
        Thread t2 = new Thread(myThread2);

        class DaemonThread2 implements Runnable {

            protected volatile boolean runnable = false;

            @Override
            public void run() {
                synchronized (this) {
                    while (runnable) {
                        try {
                            for (;;) {
                                if (frame == null) {
                                    System.out.println("ERROR: Video not found DaemonThread2.");
                                    break;
                                }
                                // converting an OpenCV IplImage to Java's Image
                                image = frame.getBufferedImage();
                                g = liveCameraPanel.getGraphics();
                                scaledImage = image.getScaledInstance(liveCameraPanel.getWidth(), liveCameraPanel.getHeight(), Image.SCALE_SMOOTH);
                                g.drawImage(scaledImage, 0, 0, 640, 480, null);
                                //System.out.println("line 430");
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                            System.out.println("error: DaemonThread2 START BUTTON");
                        }
                    }
                }
            }   // run() method
        } // end of DaemonThread2

        // DaemonThread 3: Thread to grab frames from webcam and perform image processing to it
        // The image is then saved, uploaded via ftp to webhost server, and then displayed on the JPanel.        
        DaemonThread3 myThread3 = new DaemonThread3();
        Thread t3 = new Thread(myThread3);

        class DaemonThread3 implements Runnable {

            BufferedImage image;
            Graphics g;
            Image scaledImage;
            IplImage img;
            FileWriter writer;
            protected volatile boolean runnable = false;

            @Override
            public void run() {
                synchronized (this) {
                    while (runnable) {
                        try {
                            writer = new FileWriter("pds.dat", false);
                            // set the alighnment of the results to centered
                            availableLabel.setHorizontalAlignment(SwingConstants.CENTER);
                            occupiedLabel.setHorizontalAlignment(SwingConstants.CENTER);
                            totalLabel.setHorizontalAlignment(SwingConstants.CENTER);

                            for (;;) {
                                //Thread.sleep(3000);
                                time = "" + new Date();
                                // send the grabbed image to ImageProcess.java class for image processing
                                algorithm = new ImageProcess(imageToDisplay);
                                // returns the procecssed image and save it
                                img = algorithm.computeParkingSpace();
                                cvSaveImage("imageflux.jpg", img);

                                // save the results of parking space computation to a .dat file
                                writeResults();
                                // then upload both processed image and .dat file to webhost server
                                uploadImageResult();
                                uploadTextResult();

                                // convert the processed IplImage to Java's Image to display in the JPanel
                                image = img.getBufferedImage();
                                g = spaceDetectorPanel.getGraphics();
                                scaledImage = image.getScaledInstance(spaceDetectorPanel.getWidth(), spaceDetectorPanel.getHeight(), Image.SCALE_SMOOTH);
                                g.drawImage(scaledImage, 0, 0, 640, 480, null);
                                
                                

                                // update time stamp and parking space results
                                timestampLabel.setText(time);
                                availableLabel.setText(Integer.toString(algorithm.availableSpace));
                                occupiedLabel.setText(Integer.toString(algorithm.occupiedSpace));
                                totalLabel.setText(Integer.toString(algorithm.totalSpace));
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                            System.out.println("error: DaemonThread3");
                        }
                    } //while
                }
            } //end of DaemonThread 3 run() method

            // overwrite and save a .dat file containing the available, occupied, and total space in the parking image
            void writeResults() {
                try {
                    int avail, occupied, total;
                    avail = algorithm.availableSpace;
                    occupied = algorithm.occupiedSpace;
                    total = algorithm.totalSpace;
                    writer.write(Integer.toString(avail));
                    writer.write("\r\n");
                    writer.write(Integer.toString(occupied));
                    writer.write("\r\n");
                    writer.write(Integer.toString(total));
                    writer.write("\r\n");
                    writer.close();
                } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println("error: writeResults() method");
                }
            } // end of writeResults()

            // upload the processed image to webhost server via FTP using Apache Commons-Net API
            void uploadImageResult() {
                String server = "imageflux.comli.com";
                String username = "a6324394";
                String password = "kyoskite31";
                int port = 21;
                FTPClient ftpClient = new FTPClient();
                boolean picDone;
                File pictureFile = new File("imageflux.jpg");     // name of the processed image file to upload
                String remoteImageName = new String("/public_html/parking-detection/parking-result.jpg");  //name of the file once it gets uploaded to the server
                InputStream inputStream;

                try {
                    // connect to webhost server
                    ftpClient.connect(server, port);

                    // After connection attempt, you should check the reply code to verify success
                    if (!FTPReply.isPositiveCompletion(ftpClient.getReplyCode())) {
                        ftpClient.disconnect();
                        throw new Exception("FTP server refused connection! Server Reply: " + ftpClient.getReplyString());
                    }

                    // login to webhost seerver
                    ftpClient.login(username, password);
                    if (ftpClient.isConnected()) {
                        System.out.println("Log in successful!");
                    }

                    ftpClient.enterLocalPassiveMode();
                    System.out.println("Start uploading file: " + pictureFile);
                    ftpClient.setFileType(FTP.BINARY_FILE_TYPE);

                    //upload file
                    inputStream = new FileInputStream(pictureFile);
                    picDone = ftpClient.storeFile(remoteImageName, inputStream);
                    if (picDone) {
                        System.out.println("File " + pictureFile + " is uploaded successfully!");
                    } else {
                        System.out.println("File " + pictureFile + "is NOT uploaded successfully");
                    }
                    inputStream.close();
                } catch (Exception e) {
                    try {
                        throw new Exception("Errpr uploading to ftp server");
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                } finally {
                    if (ftpClient.isConnected()) {
                        try {
                            ftpClient.disconnect();
                        } catch (IOException ioe) {
                            ioe.printStackTrace();
                        }
                    }
                }
            } // end of uploadIMageResult() method

            // upload the .dat file to webhost server via FTP using Apache Commons-Net API
            void uploadTextResult() {
                String server = "imageflux.comli.com";
                String username = "a6324394";
                String password = "kyoskite31";
                int port = 21;
                FTPClient ftpClient = new FTPClient();
                boolean textDone;
                File textFile = new File("pds.dat");    // name of the .dat file that has the parking space results 
                String remoteDatName = new String("/public_html/parking-detection/pds.dat"); //name of the file once it gets uploaded to the server
                InputStream inputStream;

                try {
                    // connect to webhost server
                    ftpClient.connect(server, port);

                    // After connection attempt, you should check the reply code to verify success
                    if (!FTPReply.isPositiveCompletion(ftpClient.getReplyCode())) {
                        ftpClient.disconnect();
                        throw new Exception("FTP server refused connection! Server Reply: " + ftpClient.getReplyString());
                    }

                    // login to webhost server
                    ftpClient.login(username, password);
                    if (ftpClient.isConnected()) {
                        System.out.println("Log in successful!");
                    }

                    ftpClient.enterLocalPassiveMode();
                    System.out.println("Start uploading file: " + textFile);
                    ftpClient.setFileType(FTP.ASCII_FILE_TYPE);

                    //upload file
                    inputStream = new FileInputStream(textFile);
                    textDone = ftpClient.storeFile(remoteDatName, inputStream);
                    if (textDone) {
                        System.out.println("File " + textFile + " is uploaded successfully!");
                    } else {
                        System.out.println("File " + textFile + "is NOT uploaded successfully");
                    }
                    inputStream.close();
                } catch (Exception e) {
                    try {
                        throw new Exception("Errpr uploading to ftp server");
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                } // after upload is done, disconnect.
                finally {
                    if (ftpClient.isConnected()) {
                        try {
                            ftpClient.disconnect();
                        } catch (IOException ioe) {
                            ioe.printStackTrace();
                        }
                    }
                }
            } // end of uploadTextResult() method
        } // end of DaemonThread3
        
    } // end of DaemonThread1

    private void testImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testImageButtonActionPerformed
        // sample button to load a static image, process and display results on the jPanel
        String s1 = "fri.jpg";  // fri.jpg uses detectPerfectPoints()

        String time = "" + new Date();
        timestampLabel.setText(time);

        Thread thread1 = new Thread() {
            @Override
            public void run() {
                try {
                    IplImage captureImage = cvLoadImage(s1);
                    ImageProcess algorithm = new ImageProcess(captureImage);
                    IplImage res = algorithm.computeParkingSpace();
                    //IplImage res = algorithm.drawAllPoints();
                    //algorithm.DetectPoints();

                    //BufferedImage image = ImageIO.read(new File(s3));
                    BufferedImage image = res.getBufferedImage();

                    Graphics g = spaceDetectorPanel.getGraphics();
                    Image scaledImage = image.getScaledInstance(spaceDetectorPanel.getWidth(), spaceDetectorPanel.getHeight(), Image.SCALE_SMOOTH);
                    g.drawImage(scaledImage, 0, 0, 640, 480, null);

                    // set alignment of text to center
                    availableLabel.setHorizontalAlignment(SwingConstants.CENTER);
                    occupiedLabel.setHorizontalAlignment(SwingConstants.CENTER);
                    totalLabel.setHorizontalAlignment(SwingConstants.CENTER);

                    availableLabel.setText("6");
                    occupiedLabel.setText("2");
                    totalLabel.setText("8");
                } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println("Error on the CAPTURE button");
                }
            }
        };
        thread1.start();
        showPointsButton.setEnabled(true);
        testImageButton.setEnabled(false);
        setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
    }//GEN-LAST:event_testImageButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // STOP the live video

        myThread1.runnable = false;
        stopButton.setEnabled(false);
        startButton.setEnabled(true);
        cvReleaseCapture(g_capture);

    }//GEN-LAST:event_stopButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // START the live video

        myThread1 = new DaemonThread1();
        Thread t1 = new Thread(myThread1);
        t1.setDaemon(true);
        myThread1.runnable = true;
        t1.start();
        startButton.setEnabled(false);
        stopButton.setEnabled(true);
        setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);

    }//GEN-LAST:event_startButtonActionPerformed

    private void showPointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPointsButtonActionPerformed
        // button to show sample detected 26 points

        String s1 = "fri.jpg";     // fri.jpg uses detectPerfectPoints()
        String time = "" + new Date();
        timestampLabel.setText(time);

        Thread thread1 = new Thread() {
            @Override
            public void run() {
                try {
                    IplImage captureImage = cvLoadImage(s1);
                    ImageProcess algorithm = new ImageProcess(captureImage);
                    IplImage res = algorithm.drawAllPoints();

                    BufferedImage image = res.getBufferedImage();
                    Graphics g = spaceDetectorPanel.getGraphics();
                    Image scaledImage = image.getScaledInstance(spaceDetectorPanel.getWidth(), spaceDetectorPanel.getHeight(), Image.SCALE_SMOOTH);
                    g.drawImage(scaledImage, 0, 0, 640, 480, null);

                    // set alignment of text to center
                    availableLabel.setHorizontalAlignment(SwingConstants.CENTER);
                    occupiedLabel.setHorizontalAlignment(SwingConstants.CENTER);
                    totalLabel.setHorizontalAlignment(SwingConstants.CENTER);

                    availableLabel.setText("6");
                    occupiedLabel.setText("2");
                    totalLabel.setText("8");
                } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println("Error on the CAPTURE button");
                }
            }
        };
        thread1.start();
        showPointsButton.setEnabled(false);
        testImageButton.setEnabled(true);
        setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
    }//GEN-LAST:event_showPointsButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);                
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel availableLabel;
    private javax.swing.JLabel availableSpaceLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel liveCameraLabel;
    private javax.swing.JPanel liveCameraPanel;
    private javax.swing.JLabel occupiedLabel;
    private javax.swing.JButton showPointsButton;
    private javax.swing.JLabel spaceDetectorLabel;
    private javax.swing.JPanel spaceDetectorPanel;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton testImageButton;
    private javax.swing.JLabel timestampLabel;
    private javax.swing.JLabel timestampText;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JLabel totalSpaceLabel;
    // End of variables declaration//GEN-END:variables
}
